package com.blog.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.config.ldap.EmbeddedLdapServerContextSourceFactoryBean;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.blog.entities.User;
import com.blog.security.CustomUserDetailService;
import com.blog.security.JwtAuthenticationEntryPoint;
import com.blog.security.JwtAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	@Autowired
	private CustomUserDetailService coustomUserDetailService;
    @Autowired
	private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
    @Autowired 
    private JwtAuthenticationFilter jwtAuthenticationFilter;
	@Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
       http.csrf()
       		.disable()
       		.authorizeHttpRequests()
       		.anyRequest()
       		.authenticated()
       		.and()
       		.exceptionHandling().authenticationEntryPoint(this.jwtAuthenticationEntryPoint)
       		.and()
       		.sessionManagement()
       		.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
       http.addFilterBefore(this.jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
       http.authenticationProvider(daoAuthenticationProvider());
       return http.build();
       
    }
    @Bean
    public DaoAuthenticationProvider daoAuthenticationProvider()
    {
    	DaoAuthenticationProvider provider= new DaoAuthenticationProvider();
    	provider.setUserDetailsService(this.coustomUserDetailService);
    	provider.setPasswordEncoder(passwordEncoder());  
    	return provider;
    }
    
    @Bean
    public PasswordEncoder passwordEncoder()
    {
    	return new BCryptPasswordEncoder();
    }
    @Bean
    public AuthenticationManager authenticationManagerBean(AuthenticationConfiguration configaration) throws Exception
    {
    	return configaration.getAuthenticationManager();
    }

}
